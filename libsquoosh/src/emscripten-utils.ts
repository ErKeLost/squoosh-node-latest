// import { fileURLToPath, URL } from 'url';

// export function pathify(path: string): string {
//   if (path.startsWith('file://')) {
//     path = fileURLToPath(path);
//   }
//   return path;
// }

// export function instantiateEmscriptenWasm<T extends EmscriptenWasm.Module>(
//   factory: EmscriptenWasm.ModuleFactory<T>,
//   path: string,
//   workerJS: string = '',
// ): Promise<T> {
//   return factory({
//     locateFile(requestPath) {
//       // The glue code generated by emscripten uses the original
//       // file names of the worker file and the wasm binary.
//       // These will have changed in the bundling process and
//       // we need to inject them here.
//       if (requestPath.endsWith('.wasm')) return pathify(path);
//       if (requestPath.endsWith('.worker.js')) return pathify(workerJS);
//       return requestPath;
//     },
//   });
// }

import { fileURLToPath, pathToFileURL } from 'url';
import { isAbsolute } from 'path';

export function pathify(path: string): string {
  // 如果是 file:// 协议的 URL，转换为文件路径
  if (path.startsWith('file://')) {
    return fileURLToPath(path);
  }

  // 如果是绝对路径，转换为 file:// URL
  if (isAbsolute(path)) {
    return pathToFileURL(path).href;
  }

  // 如果是相对路径，先转换为绝对路径，再转换为 file:// URL
  const absolutePath = new URL(path, import.meta.url).pathname;
  return pathToFileURL(absolutePath).href;
}

export function instantiateEmscriptenWasm<T extends EmscriptenWasm.Module>(
  factory: EmscriptenWasm.ModuleFactory<T>,
  path: string,
  workerJS: string = '',
): Promise<T> {
  return factory({
    locateFile(requestPath: string) {
      try {
        // 处理 .wasm 文件
        if (requestPath.endsWith('.wasm')) {
          const wasmPath = pathify(path);
          console.debug('WASM path:', wasmPath); // 调试日志
          return wasmPath;
        }

        // 处理 worker 文件
        if (requestPath.endsWith('.worker.js')) {
          const workerPath = pathify(workerJS);
          console.debug('Worker path:', workerPath); // 调试日志
          return workerPath;
        }

        return requestPath;
      } catch (error) {
        console.error('Error in locateFile:', error);
        throw error;
      }
    },
  });
}
